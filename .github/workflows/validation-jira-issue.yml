name: Validate Jira Issue
on:
  pull_request:
    types: [opened, synchronize]
    branches: ["develop"]



jobs:
  ValidatePR:
    runs-on: ubuntu
    steps:
      - name: Checkout from repository
        uses: actions/checkout@v4
      - name: Get last commit message through Github API
        uses: actions/github-script@v7
        id: get-message
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const res = await github.rest.pulls.listCommits({
              ...context.repo,
              pull_number: context.payload.number,
              per_page: 100,
            });
            const commits = res?.data?.map((commit)=>{return commit});
            const lastIndex = commits.length -1;
            const lastCommitMessage = commits[lastIndex];
            console.log(lastCommitMessage.commit.message);
            return lastCommitMessage.commit.message;

      - name: Extract Jira Key
        id: extract-key
        run: |
          ISSUE_KEY=$(echo ${{steps.get-message.outputs.result}}| grep -o '${{secrets.JIRA_PROJECT}}-[0-9]*')
          # ISSUE_KEY=LEANDGP-1 *****Bisogna sistemare regex*****
          echo "issue_key=$ISSUE_KEY" >> "$GITHUB_OUTPUT"
      - name: Check that the issues exists on JIRA
        id: validate-commits
        uses: sozo-design/curl@v1.0.2
        with:
          args: -k  -u "${{secrets.JIRA_USER}}:${{secrets.JIRA_PASSWORD}}" ${{secrets.JIRA_URL}}/browse/${{steps.extract-key.outputs.issue_key}}
      - name: Set Success Status
        if: ${{steps.validate-commits.conclusion == 'success'}}
        id: set-success
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const status ={
                state: 'success',
                description: "All commits have a valid Jira issues",
                context: "Jira Validation"
            };
            await github.rest.repos.createCommitStatus({
                ...context.repo,
                sha: context.sha,
                ...status
            })
      - name: Set Failure Status
        if: ${{failure()}}
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const status ={
                state: 'failure',
                description: "Unable to PR -> Commits cannot be verified on JIRA",
                context: "Jira Validation"
            };
            await github.rest.repos.createCommitStatus({
                ...context.repo,
                sha: context.sha,
                ...status
            })
      - name: Get PR Url
        uses: actions/github-script@v7
        if: ${{steps.set-success.conclusion == 'success'}}
        id: get-url
        with:
          script: |
            return `h2. Pull Request: {*}Status:{*} Ready to be merged  {*}URL:{*} ${context.payload.pull_request.html_url}`
      - name: Write file
        if: ${{steps.set-success.conclusion == 'success'}}
        run: |
          echo '{"body": ${{steps.get-url.outputs.result}}}' > pr.json
      - name: Track PR on JIRA
        if: ${{steps.set-success.conclusion == 'success'}}
        uses: sozo-design/curl@v1.0.2
        with:
          args: -k -H "Content-Type:application/json" -X POST --data @"./pr.json" -u "${{ secrets.JIRA_USER }}:${{ secrets.JIRA_PASSWORD }}" https://${{secrets.JIRA_URL}}/rest/api/2/issue/${{steps.extract-key.outputs.issue_key}}/comment
